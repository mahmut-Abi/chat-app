name: Flutter CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run code generation
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: |
          # Run flutter analyze and check for errors only
          OUTPUT=$(flutter analyze 2>&1 || true)
          echo "$OUTPUT"
          
          # Check if there are any actual errors (not just warnings or info)
          if echo "$OUTPUT" | grep -q '^  error •'; then
            echo ""
            echo "❌ Flutter analyze found errors!"
            exit 1
          fi
          
          # Count issues
          ERROR_COUNT=$(echo "$OUTPUT" | grep -c '^  error •' || true)
          WARNING_COUNT=$(echo "$OUTPUT" | grep -c '^warning •' || true)
          INFO_COUNT=$(echo "$OUTPUT" | grep -c '^   info •' || true)
          
          echo ""
          echo "✅ Flutter analyze passed!"
          echo "   Found $ERROR_COUNT error(s), $WARNING_COUNT warning(s), and $INFO_COUNT info message(s)"
          echo "   (Only errors will fail the CI)"
        shell: bash

      - name: Check formatting
        run: dart format --set-exit-if-changed .

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build ${{ matrix.platform }} (${{ matrix.arch }})
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Web
          - platform: web
            os: ubuntu-latest
            arch: wasm
          
          # macOS
          - platform: macos
            os: macos-13  # Intel x64
            arch: x64
          - platform: macos
            os: macos-14  # Apple Silicon arm64
            arch: arm64
          
          # Windows
          - platform: windows
            os: windows-latest
            arch: x64
          
          # Linux
          - platform: linux
            os: ubuntu-latest
            arch: x64
          - platform: linux
            os: ubuntu-latest
            arch: arm64
          
          # Android
          - platform: apk
            os: ubuntu-latest
            arch: arm64-v8a
          
          # iOS
          - platform: ios
            os: macos-latest
            arch: arm64
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true
          architecture: ${{ matrix.arch == 'arm64' && matrix.platform != 'linux' && 'arm64' || 'x64' }}

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev libsecret-1-dev libjsoncpp-dev libayatana-appindicator3-dev

      - name: Setup Linux ARM64 cross-compilation (if needed)
        if: matrix.platform == 'linux' && matrix.arch == 'arm64'
        run: |
          sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu

      - name: Get dependencies
        run: flutter pub get

      - name: Run code generation
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build for ${{ matrix.platform }} (${{ matrix.arch }})
        run: |
          if [ "${{ matrix.platform }}" = "ios" ]; then
            flutter build ios --release --no-codesign
          elif [ "${{ matrix.platform }}" = "linux" ] && [ "${{ matrix.arch }}" = "arm64" ]; then
            # Linux ARM64 交叉编译需要特殊处理
            echo "Linux ARM64 build requires cross-compilation setup"
            echo "Skipping for now - needs additional configuration"
            exit 0
          else
            flutter build ${{ matrix.platform }} --release
          fi
        shell: bash

      - name: Prepare artifacts (Web)
        if: success() && matrix.platform == 'web'
        run: |
          mkdir -p artifacts
          cd build/web
          zip -r ../../artifacts/chat-app-web-${{ matrix.arch }}.zip .
        shell: bash

      - name: Prepare artifacts (macOS)
        if: success() && matrix.platform == 'macos'
        run: |
          mkdir -p artifacts
          cd build/macos/Build/Products/Release
          # 创建 ZIP 包
          if [ -d "chat_app.app" ]; then
            zip -r ../../../../artifacts/chat-app-macos-${{ matrix.arch }}.zip chat_app.app
          fi
        shell: bash

      - name: Prepare artifacts (Windows)
        if: success() && matrix.platform == 'windows'
        run: |
          New-Item -ItemType Directory -Force -Path artifacts
          Compress-Archive -Path build/windows/x64/runner/Release/* -DestinationPath artifacts/chat-app-windows-${{ matrix.arch }}.zip
        shell: pwsh

      - name: Prepare artifacts (Linux)
        if: success() && matrix.platform == 'linux' && matrix.arch == 'x64'
        run: |
          mkdir -p artifacts
          cd build/linux/x64/release/bundle
          tar -czf ../../../../artifacts/chat-app-linux-${{ matrix.arch }}.tar.gz .
        shell: bash

      - name: Prepare artifacts (Android APK)
        if: success() && matrix.platform == 'apk'
        run: |
          mkdir -p artifacts
          if [ -f "build/app/outputs/flutter-apk/app-release.apk" ]; then
            cp build/app/outputs/flutter-apk/app-release.apk artifacts/chat-app-android-${{ matrix.arch }}.apk
          fi
          # 如果生成了 AAB
          if [ -f "build/app/outputs/bundle/release/app-release.aab" ]; then
            cp build/app/outputs/bundle/release/app-release.aab artifacts/chat-app-android-${{ matrix.arch }}.aab
          fi
        shell: bash

      - name: Prepare artifacts (iOS)
        if: success() && matrix.platform == 'ios'
        run: |
          mkdir -p artifacts
          cd build/ios/Release-iphoneos
          # 创建 IPA (需要签名的话会失败,这里只是打包文件)
          if [ -d "Runner.app" ]; then
            zip -r ../../../artifacts/chat-app-ios-${{ matrix.arch }}.zip Runner.app
          fi
        shell: bash

      - name: List artifacts
        if: success()
        run: |
          if [ -d "artifacts" ]; then
            echo "Generated artifacts:"
            ls -lh artifacts/
          else
            echo "No artifacts directory found"
          fi
        shell: bash

      - name: Upload build artifacts
        if: success() && matrix.arch != 'arm64' || matrix.platform == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-${{ matrix.arch }}-build
          path: artifacts/*
          retention-days: 7
          compression-level: 0

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: chat-app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
