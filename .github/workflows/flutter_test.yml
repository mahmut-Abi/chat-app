name: Flutter CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Run code generation
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Analyze code
        run: |
          # Run flutter analyze and check for errors only
          OUTPUT=$(flutter analyze 2>&1 || true)
          echo "$OUTPUT"
          
          # Check if there are any actual errors (not just warnings or info)
          if echo "$OUTPUT" | grep -q '^  error •'; then
            echo ""
            echo "❌ Flutter analyze found errors!"
            exit 1
          fi
          
          # Count issues
          ERROR_COUNT=$(echo "$OUTPUT" | grep -c '^  error •' || true)
          WARNING_COUNT=$(echo "$OUTPUT" | grep -c '^warning •' || true)
          INFO_COUNT=$(echo "$OUTPUT" | grep -c '^   info •' || true)
          
          echo ""
          echo "✅ Flutter analyze passed!"
          echo "   Found $ERROR_COUNT error(s), $WARNING_COUNT warning(s), and $INFO_COUNT info message(s)"
          echo "   (Only errors will fail the CI)"

      - name: Check formatting
        run: flutter format --set-exit-if-changed .

      - name: Run tests
        run: flutter test --coverage

      - name: Upload coverage to Codecov
        if: matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          files: ./coverage/lcov.info
          fail_ci_if_error: false

  build:
    name: Build on ${{ matrix.platform }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - platform: web
            os: ubuntu-latest
          - platform: macos
            os: macos-latest
          - platform: windows
            os: windows-latest
          - platform: linux
            os: ubuntu-latest
          - platform: apk
            os: ubuntu-latest
          - platform: ios
            os: macos-latest
      fail-fast: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
          cache: true

      - name: Install Linux dependencies
        if: matrix.platform == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y clang cmake ninja-build pkg-config libgtk-3-dev libsecret-1-dev libjsoncpp-dev libayatana-appindicator3-dev

      - name: Get dependencies
        run: flutter pub get

      - name: Run code generation
        run: flutter pub run build_runner build --delete-conflicting-outputs

      - name: Build for ${{ matrix.platform }}
        run: |
          if [ "${{ matrix.platform }}" = "ios" ]; then
            flutter build ios --release --no-codesign
          else
            flutter build ${{ matrix.platform }} --release
          fi
        shell: bash

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-build
          path: |
            build/web/**
            build/macos/**
            build/windows/**
            build/linux/**
            build/app/outputs/**
            build/ios/**
          retention-days: 7

  docker:
    name: Docker Build Test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          tags: chat-app:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run -d -p 8080:80 --name chat-app-test chat-app:test
          sleep 5
          curl -f http://localhost:8080 || exit 1
          docker logs chat-app-test
          docker stop chat-app-test
          docker rm chat-app-test
          echo "✅ Docker 镜像测试成功！"
