// Mocks generated by Mockito 5.4.6 from annotations
// in chat_app/test/unit/agent_repository_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chat_app/core/storage/storage_service.dart' as _i3;
import 'package:chat_app/features/agent/data/tool_executor.dart' as _i5;
import 'package:chat_app/features/agent/domain/agent_tool.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeToolExecutionResult_0 extends _i1.SmartFake
    implements _i2.ToolExecutionResult {
  _FakeToolExecutionResult_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [StorageService].
///
/// See the documentation for Mockito's code generation for more information.
class MockStorageService extends _i1.Mock implements _i3.StorageService {
  MockStorageService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<void> init() =>
      (super.noSuchMethod(
            Invocation.method(#init, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveConversation(String? id, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#saveConversation, [id, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  Map<String, dynamic>? getConversation(String? id) =>
      (super.noSuchMethod(Invocation.method(#getConversation, [id]))
          as Map<String, dynamic>?);

  @override
  List<Map<String, dynamic>> getAllConversations() =>
      (super.noSuchMethod(
            Invocation.method(#getAllConversations, []),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  _i4.Future<void> deleteConversation(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteConversation, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveGroup(String? id, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#saveGroup, [id, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  Map<String, dynamic>? getGroup(String? id) =>
      (super.noSuchMethod(Invocation.method(#getGroup, [id]))
          as Map<String, dynamic>?);

  @override
  List<Map<String, dynamic>> getAllGroups() =>
      (super.noSuchMethod(
            Invocation.method(#getAllGroups, []),
            returnValue: <Map<String, dynamic>>[],
          )
          as List<Map<String, dynamic>>);

  @override
  _i4.Future<void> deleteGroup(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteGroup, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> savePromptTemplate(String? id, Map<String, dynamic>? data) =>
      (super.noSuchMethod(
            Invocation.method(#savePromptTemplate, [id, data]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>?> getPromptTemplate(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getPromptTemplate, [id]),
            returnValue: _i4.Future<Map<String, dynamic>?>.value(),
          )
          as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getAllPromptTemplates() =>
      (super.noSuchMethod(
            Invocation.method(#getAllPromptTemplates, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> deletePromptTemplate(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deletePromptTemplate, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveSetting(String? key, dynamic value) =>
      (super.noSuchMethod(
            Invocation.method(#saveSetting, [key, value]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  T? getSetting<T>(String? key) =>
      (super.noSuchMethod(Invocation.method(#getSetting, [key])) as T?);

  @override
  _i4.Future<List<String>> getAllKeys() =>
      (super.noSuchMethod(
            Invocation.method(#getAllKeys, []),
            returnValue: _i4.Future<List<String>>.value(<String>[]),
          )
          as _i4.Future<List<String>>);

  @override
  _i4.Future<void> deleteSetting(String? key) =>
      (super.noSuchMethod(
            Invocation.method(#deleteSetting, [key]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> saveApiConfig(String? id, Map<String, dynamic>? config) =>
      (super.noSuchMethod(
            Invocation.method(#saveApiConfig, [id, config]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<Map<String, dynamic>?> getApiConfig(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#getApiConfig, [id]),
            returnValue: _i4.Future<Map<String, dynamic>?>.value(),
          )
          as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<List<Map<String, dynamic>>> getAllApiConfigs() =>
      (super.noSuchMethod(
            Invocation.method(#getAllApiConfigs, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>>.value(
              <Map<String, dynamic>>[],
            ),
          )
          as _i4.Future<List<Map<String, dynamic>>>);

  @override
  _i4.Future<void> deleteApiConfig(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteApiConfig, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> clearAll() =>
      (super.noSuchMethod(
            Invocation.method(#clearAll, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);
}

/// A class which mocks [ToolExecutorManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockToolExecutorManager extends _i1.Mock
    implements _i5.ToolExecutorManager {
  MockToolExecutorManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void registerExecutor(_i5.ToolExecutor? executor) => super.noSuchMethod(
    Invocation.method(#registerExecutor, [executor]),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<_i2.ToolExecutionResult> execute(
    _i2.AgentTool? tool,
    Map<String, dynamic>? input,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#execute, [tool, input]),
            returnValue: _i4.Future<_i2.ToolExecutionResult>.value(
              _FakeToolExecutionResult_0(
                this,
                Invocation.method(#execute, [tool, input]),
              ),
            ),
          )
          as _i4.Future<_i2.ToolExecutionResult>);
}
