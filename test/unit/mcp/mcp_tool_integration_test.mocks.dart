// Mocks generated by Mockito 5.4.6 from annotations
// in chat_app/test/unit/mcp/mcp_tool_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:chat_app/features/mcp/data/mcp_client_base.dart' as _i5;
import 'package:chat_app/features/mcp/data/mcp_repository.dart' as _i3;
import 'package:chat_app/features/mcp/domain/mcp_config.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeMcpConfig_0 extends _i1.SmartFake implements _i2.McpConfig {
  _FakeMcpConfig_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [McpRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockMcpRepository extends _i1.Mock implements _i3.McpRepository {
  MockMcpRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.McpConfig> createConfig({
    required String? name,
    _i2.McpConnectionType? connectionType = _i2.McpConnectionType.http,
    required String? endpoint,
    List<String>? args,
    Map<String, String>? env,
    String? description,
    Map<String, dynamic>? headers,
  }) =>
      (super.noSuchMethod(
            Invocation.method(#createConfig, [], {
              #name: name,
              #connectionType: connectionType,
              #endpoint: endpoint,
              #args: args,
              #env: env,
              #description: description,
              #headers: headers,
            }),
            returnValue: _i4.Future<_i2.McpConfig>.value(
              _FakeMcpConfig_0(
                this,
                Invocation.method(#createConfig, [], {
                  #name: name,
                  #connectionType: connectionType,
                  #endpoint: endpoint,
                  #args: args,
                  #env: env,
                  #description: description,
                  #headers: headers,
                }),
              ),
            ),
          )
          as _i4.Future<_i2.McpConfig>);

  @override
  _i4.Future<_i2.McpConfig> addConfig(_i2.McpConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#addConfig, [config]),
            returnValue: _i4.Future<_i2.McpConfig>.value(
              _FakeMcpConfig_0(this, Invocation.method(#addConfig, [config])),
            ),
          )
          as _i4.Future<_i2.McpConfig>);

  @override
  _i4.Future<List<_i2.McpConfig>> getAllConfigs() =>
      (super.noSuchMethod(
            Invocation.method(#getAllConfigs, []),
            returnValue: _i4.Future<List<_i2.McpConfig>>.value(
              <_i2.McpConfig>[],
            ),
          )
          as _i4.Future<List<_i2.McpConfig>>);

  @override
  _i4.Future<void> updateConfig(_i2.McpConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#updateConfig, [config]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<void> deleteConfig(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#deleteConfig, [id]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> connect(_i2.McpConfig? config) =>
      (super.noSuchMethod(
            Invocation.method(#connect, [config]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> disconnect(String? configId) =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, [configId]),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i5.McpClientBase? getClient(String? configId) =>
      (super.noSuchMethod(Invocation.method(#getClient, [configId]))
          as _i5.McpClientBase?);

  @override
  _i2.McpConnectionStatus? getConnectionStatus(String? configId) =>
      (super.noSuchMethod(Invocation.method(#getConnectionStatus, [configId]))
          as _i2.McpConnectionStatus?);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [McpClientBase].
///
/// See the documentation for Mockito's code generation for more information.
class MockMcpClientBase extends _i1.Mock implements _i5.McpClientBase {
  MockMcpClientBase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.McpConfig get config =>
      (super.noSuchMethod(
            Invocation.getter(#config),
            returnValue: _FakeMcpConfig_0(this, Invocation.getter(#config)),
          )
          as _i2.McpConfig);

  @override
  _i2.McpConnectionStatus get status =>
      (super.noSuchMethod(
            Invocation.getter(#status),
            returnValue: _i2.McpConnectionStatus.disconnected,
          )
          as _i2.McpConnectionStatus);

  @override
  set status(_i2.McpConnectionStatus? _status) => super.noSuchMethod(
    Invocation.setter(#status, _status),
    returnValueForMissingStub: null,
  );

  @override
  set lastHealthCheck(DateTime? _lastHealthCheck) => super.noSuchMethod(
    Invocation.setter(#lastHealthCheck, _lastHealthCheck),
    returnValueForMissingStub: null,
  );

  @override
  set lastError(String? _lastError) => super.noSuchMethod(
    Invocation.setter(#lastError, _lastError),
    returnValueForMissingStub: null,
  );

  @override
  _i4.Future<bool> connect() =>
      (super.noSuchMethod(
            Invocation.method(#connect, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<void> disconnect() =>
      (super.noSuchMethod(
            Invocation.method(#disconnect, []),
            returnValue: _i4.Future<void>.value(),
            returnValueForMissingStub: _i4.Future<void>.value(),
          )
          as _i4.Future<void>);

  @override
  _i4.Future<bool> healthCheck() =>
      (super.noSuchMethod(
            Invocation.method(#healthCheck, []),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>?> getContext(String? contextId) =>
      (super.noSuchMethod(
            Invocation.method(#getContext, [contextId]),
            returnValue: _i4.Future<Map<String, dynamic>?>.value(),
          )
          as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<bool> pushContext(
    String? contextId,
    Map<String, dynamic>? context,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#pushContext, [contextId, context]),
            returnValue: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<Map<String, dynamic>?> callTool(
    String? toolName,
    Map<String, dynamic>? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#callTool, [toolName, params]),
            returnValue: _i4.Future<Map<String, dynamic>?>.value(),
          )
          as _i4.Future<Map<String, dynamic>?>);

  @override
  _i4.Future<List<Map<String, dynamic>>?> listTools() =>
      (super.noSuchMethod(
            Invocation.method(#listTools, []),
            returnValue: _i4.Future<List<Map<String, dynamic>>?>.value(),
          )
          as _i4.Future<List<Map<String, dynamic>>?>);

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
