#!/bin/sh
#
# Git pre-commit hook for Flutter projects
# Runs flutter analyze and dart format checks
# - Blocks on analyze errors (warnings/info allowed)
# - Blocks if code is not formatted
#

echo "üé® Checking Dart formatting..."
echo ""

# Get list of staged Dart files
STAGED_DART_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep '\.dart$' || true)

if [ -n "$STAGED_DART_FILES" ]; then
    # Check if files are formatted
    FORMAT_OUTPUT=$(dart format --output=none --set-exit-if-changed $STAGED_DART_FILES 2>&1)
    FORMAT_EXIT_CODE=$?
    
    if [ $FORMAT_EXIT_CODE -ne 0 ]; then
        echo "‚ùå Some Dart files are not formatted!"
        echo ""
        echo "Please run: flutter format ."
        echo "Or format specific files:"
        echo "$STAGED_DART_FILES" | while read -r file; do
            echo "  dart format $file"
        done
        echo ""
        exit 1
    else
        echo "‚úÖ All Dart files are formatted!"
        echo ""
    fi
else
    echo "‚ÑπÔ∏è  No Dart files to check"
    echo ""
fi

echo "üîç Running Flutter analyze..."
echo ""

# Run flutter analyze and capture output
ANALYZE_OUTPUT=$(flutter analyze --no-pub 2>&1)
ANALYZE_EXIT_CODE=$?

# Display the output
echo "$ANALYZE_OUTPUT"
echo ""

# Check if there are any actual errors (not just warnings or info)
if echo "$ANALYZE_OUTPUT" | grep -q '^  error ‚Ä¢'; then
    echo "‚ùå Flutter analyze found errors!"
    echo "Please fix the errors before committing."
    echo "(warnings and info messages are allowed)"
    echo ""
    exit 1
fi

# Show summary
ERROR_COUNT=$(echo "$ANALYZE_OUTPUT" | grep -c '^  error ‚Ä¢' || true)
WARNING_COUNT=$(echo "$ANALYZE_OUTPUT" | grep -c '^warning ‚Ä¢' || true)
INFO_COUNT=$(echo "$ANALYZE_OUTPUT" | grep -c '^   info ‚Ä¢' || true)

if [ $ERROR_COUNT -eq 0 ]; then
    echo "‚úÖ Flutter analyze passed!"
    if [ $WARNING_COUNT -gt 0 ] || [ $INFO_COUNT -gt 0 ]; then
        echo "   Found $WARNING_COUNT warning(s) and $INFO_COUNT info message(s)"
        echo "   (These won't block the commit)"
    fi
    echo ""
    exit 0
else
    echo "‚ùå Found $ERROR_COUNT error(s)"
    echo ""
    exit 1
fi
